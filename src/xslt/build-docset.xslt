<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE xsl:stylesheet [
	<!ENTITY id-prefix "">
]>
<xsl:stylesheet
	version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
>

	<xsl:output
		method="html"
		indent="yes"
		omit-xml-declaration="yes"
		doctype-system="about:legacy-compat"
	/>

	<xsl:variable name="prefix" select="'&lt;xsl:'" />
	<xsl:variable name="suffix" select="'&gt;'" />

	<xsl:key name="elements-by-name" match="element" use="@name" />
	<xsl:key name="nodes-by-name" match="element | attribute" use="@name" />

	<xsl:variable name="examples" select= "document('../xml/examples.xml')/examples"/>

	<xsl:template match="/">
		<html>
		<head>
			<title>
				<xsl:text>XSLT Quick Reference</xsl:text>
				<xsl:value-of select="concat(' &#8212; v', docset/@version)" />
			</title>
			<link rel="stylesheet" href="/assets/docset.css" />
			<script src="/assets/application.js"></script>
			<meta name="viewport" content="width=device-width, initial-scale=1" />
			<xsl:comment>
Note: This file is generated by XSLT from the elements.xml file.
So you definitely shouldn't be editing it, or you'll end up sad...
			</xsl:comment>
		</head>
		<body id="toc" class="language-markup">
			<section id="xslt-elements">
				<h1>XSLT elements</h1>
				<xsl:apply-templates select="docset/element">
					<xsl:sort select="@name" data-type="text" order="ascending" />
				</xsl:apply-templates>
			</section>

			<section id="xpath-functions">
				<h1>XPath functions</h1>
				<xsl:apply-templates select="docset/functions/function">
					<xsl:sort select="@name" data-type="text" order="ascending" />
				</xsl:apply-templates>
			</section>

			<xsl:call-template name="fork-banner" />
			<xsl:call-template name="toc-link" />
		</body>
		</html>
	</xsl:template>

	<xsl:template match="element">
		<section class="element" id="&id-prefix;{@name}">
			<xsl:if test="$examples/example[@element = current()/@name]"><xsl:attribute name="class">element with-sample</xsl:attribute></xsl:if>
			<xsl:apply-templates select="@name" />
			<xsl:apply-templates select="description" />
			<xsl:apply-templates select="$examples/example[@element = current()/@name]" />
			<xsl:if test="attribute">
				<ul class="content">
					<xsl:apply-templates select="attribute" mode="content" />
				</ul>
			</xsl:if>
			<xsl:if test="element">
				<ul class="content">
					<xsl:apply-templates select="element" mode="content" />
				</ul>
			</xsl:if>
		</section>
	</xsl:template>

	<xsl:template match="element[@ref]">
		<xsl:apply-templates select="key('elements-by-name', @ref)" />
	</xsl:template>

	<xsl:template match="element/@name">
		<h1>
			<a href="#&id-prefix;{.}">
				<xsl:value-of select="$prefix" />
				<xsl:value-of select="." />
				<xsl:value-of select="$suffix" />
			</a>
		</h1>
	</xsl:template>

	<xsl:template match="element" mode="content">
		<xsl:variable name="elem" select="self::element[@name] | key('nodes-by-name', @ref)" />
		<xsl:variable name="displayName" select="concat($prefix, $elem/@name, $suffix)" />
		<li class="elem-ref">
			<a href="#&id-prefix;{$elem/@name}">
				<xsl:value-of select="$displayName" />
			</a>
		</li>
	</xsl:template>

	<xsl:template match="attribute" mode="content">
		<xsl:variable name="attr" select="self::attribute[@name] | key('nodes-by-name', @ref)" />
		<xsl:variable name="name" select="$attr/@name" />
		<li class="attr-ref">
			<xsl:if test="@required = 'yes'"><xsl:attribute name="class">attr-ref required</xsl:attribute></xsl:if>
			<xsl:value-of select="$name" />
			<xsl:apply-templates select="$attr" mode="typeinfo" />
		</li>
	</xsl:template>

	<xsl:template match="attribute" mode="typeinfo">
		<xsl:text> </xsl:text>
		<span class="type">
			<span class="general"><xsl:value-of select="@content" /></span>
		</span>
	</xsl:template>

	<xsl:template match="attribute[@content = 'enum']" mode="typeinfo">
		<span class="type">
			<xsl:text> (</xsl:text>
			<span class="enum"><xsl:value-of select="@values" /></span>
			<xsl:text>)</xsl:text>
		</span>
	</xsl:template>

	<xsl:template match="attribute[@content = 'boolean']" mode="typeinfo">
		<span class="type">
			<xsl:text> (</xsl:text>
			<span class="enum">yes|no</span>
			<xsl:text>)</xsl:text>
		</span>
	</xsl:template>

	<xsl:template match="attribute[@content = 'nmtokens']" mode="typeinfo">
		<xsl:text> </xsl:text>
		<span class="type">
			<span class="nmtokens">list of names</span>
		</span>
	</xsl:template>

	<xsl:template match="description">
		<div class="desc">
			<xsl:apply-templates />
		</div>
	</xsl:template>

	<xsl:template match="description//*">
		<xsl:copy>
			<xsl:apply-templates select="* | text()" />
		</xsl:copy>
	</xsl:template>

	<xsl:template match="description//note">
		<p class="note">
			<xsl:apply-templates />
		</p>
	</xsl:template>

	<xsl:template match="description//ref">
		<a href="#{.}" class="elem-ref">
			<xsl:value-of select="." />
		</a>
	</xsl:template>

	<xsl:template match="description//ref[contains(., '()')]">
		<xsl:variable name="func" select="substring-before(., '()')" />
		<a href="#{$func}" class="func-ref">
			<xsl:if test="key('elements-by-name', $func)">
				<xsl:attribute name="href"><xsl:value-of select="concat('#&id-prefix;', $func, '-function')" /></xsl:attribute>
			</xsl:if>
			<xsl:value-of select="." />
		</a>
	</xsl:template>

	<xsl:template match="description//var">
		<var class="attr-ref">
			<xsl:value-of select="." />
		</var>
	</xsl:template>

	<xsl:template name="fork-banner">
		<a href="https://github.com/greystate/XSLT-Reference#readme">
			<img
				class="forkme"
				src="/assets/fork-me-right-orange@2x.png"
				alt="Fork me on GitHub"
			/>
		</a>
	</xsl:template>

	<xsl:template name="feed-link">
		<a class="feed" href="dash-feed://http%3A%2F%2Fpimpmyxslt.com%2Freference%2Fxslt-quick-reference.xml" title="Subscribe to feed for Dash here">Dash Feed</a>
	</xsl:template>

	<xsl:template name="toc-link">
		<nav class="toc-link">
			<a href="#toc" title="Show a simplified table of contents">Summary</a>
			<a href="#xslt-elements">Elements</a>
			<a href="#xpath-functions">Functions</a>
			<xsl:call-template name="feed-link" />
		</nav>
	</xsl:template>

	<xsl:template match="example">
		<div class="sample">
			<pre>
				<code>
					<xsl:apply-templates mode="copy" />
				</code>
			</pre>
		</div>
	</xsl:template>

	<xsl:template match="example[code or pre]">
		<div class="sample">
			<xsl:apply-templates mode="copy" />
		</div>
	</xsl:template>

	<!-- Identity transform -->
	<xsl:template match="* | text()" mode="copy">
		<xsl:copy>
			<xsl:copy-of select="@*" />
			<xsl:apply-templates select="* | text()" mode="copy" />
		</xsl:copy>
	</xsl:template>

	<xsl:include href="_functions.xslt" />

</xsl:stylesheet>
